[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "HandsOn_Ex/HandoOn_1/index.html",
    "href": "HandsOn_Ex/HandoOn_1/index.html",
    "title": "Chapter 1. Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I will be learnt how to import and wrangling geospatial data using the appropriate R packages:\n\nsf - a set of standards used for geographic feature made of mostly two-dimensional geometries used by geographic information systems\ntidyverse - used for data wrangling and visualization\n\nreadr - csv data import\nreadxl - excel worksheet import\ntidyr - data manipulation\nggplot2 - data visualization\n\nspdep - A collection of functions to create spatial weights matrix objects from polygon ‘contiguities’, from point patterns by distance and tessellations, for summarizing these objects, and for permitting their use in spatial data analysis, including regional aggregation by minimum spanning tree; a collection of tests for spatial ‘autocorrelation’"
  },
  {
    "objectID": "InClass_Ex/InClass_Ex1/index.html#importing-polygon-features",
    "href": "InClass_Ex/InClass_Ex1/index.html#importing-polygon-features",
    "title": "In-class Exercise",
    "section": "Importing Polygon Features",
    "text": "Importing Polygon Features\nThis code chunk will import ESRI shapefile into R.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Users\\sxing\\OneDrive - Singapore Management University\\ISSS624 Applied Geospatial Analytics\\R\\sxingxian\\GeospatialAnalytics\\InClass_Ex\\InClass_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `C:\\Users\\sxing\\OneDrive - Singapore Management University\\ISSS624 Applied Geospatial Analytics\\R\\sxingxian\\GeospatialAnalytics\\InClass_Ex\\InClass_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21"
  },
  {
    "objectID": "InClass_Ex/InClass_Ex1/index.html#importing-and-transforming-into-projected-coordinates-systems",
    "href": "InClass_Ex/InClass_Ex1/index.html#importing-and-transforming-into-projected-coordinates-systems",
    "title": "In-class Exercise",
    "section": "Importing and transforming into projected coordinates systems",
    "text": "Importing and transforming into projected coordinates systems\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\") %>% st_transform(crs = 3414)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\sxing\\OneDrive - Singapore Management University\\ISSS624 Applied Geospatial Analytics\\R\\sxingxian\\GeospatialAnalytics\\InClass_Ex\\InClass_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nhunan <- read_csv(\"data/aspatial/Hunan_2012.csv\") \n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "HandsOn_Ex/HandoOn_1/index.html#data-acquisition",
    "href": "HandsOn_Ex/HandoOn_1/index.html#data-acquisition",
    "title": "Chapter 1. Geospatial Data Wrangling with R",
    "section": "Data Acquisition",
    "text": "Data Acquisition\n\nData.gov.sg: Master Plan 2014 Subzone Boundary (Web)\nData.gov.sg: Pre-Schools Location\nLTA Data Mall: Cycling Path\nInside Airbnb: Singapore Airbnb listing data"
  },
  {
    "objectID": "HandsOn_Ex/HandoOn_1/index.html#importing-data",
    "href": "HandsOn_Ex/HandoOn_1/index.html#importing-data",
    "title": "Chapter 1. Geospatial Data Wrangling with R",
    "section": "Importing Data",
    "text": "Importing Data\nUsing st_read() function of sf package to import the relevant shapefile into R.\n\nPloygon Feature in Shapefile Form\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\sxing\\OneDrive - Singapore Management University\\ISSS624 Applied Geospatial Analytics\\R\\sxingxian\\GeospatialAnalytics\\HandsOn_Ex\\HandoOn_1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nPolyline Feature in Shapefile Form\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `C:\\Users\\sxing\\OneDrive - Singapore Management University\\ISSS624 Applied Geospatial Analytics\\R\\sxingxian\\GeospatialAnalytics\\HandsOn_Ex\\HandoOn_1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\nGIS Data in KML Format\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\sxing\\OneDrive - Singapore Management University\\ISSS624 Applied Geospatial Analytics\\R\\sxingxian\\GeospatialAnalytics\\HandsOn_Ex\\HandoOn_1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "HandsOn_Ex/HandoOn_1/index.html#working-with-st_geometry",
    "href": "HandsOn_Ex/HandoOn_1/index.html#working-with-st_geometry",
    "title": "Chapter 1. Geospatial Data Wrangling with R",
    "section": "Working with st_geometry()",
    "text": "Working with st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303..."
  },
  {
    "objectID": "HandsOn_Ex/HandoOn_1/index.html#working-with-glimpse",
    "href": "HandsOn_Ex/HandoOn_1/index.html#working-with-glimpse",
    "title": "Chapter 1. Geospatial Data Wrangling with R",
    "section": "Working with glimpse()",
    "text": "Working with glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…"
  },
  {
    "objectID": "HandsOn_Ex/HandoOn_1/index.html#working-with-head",
    "href": "HandsOn_Ex/HandoOn_1/index.html#working-with-head",
    "title": "Chapter 1. Geospatial Data Wrangling with R",
    "section": "Working with head()",
    "text": "Working with head()\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "HandsOn_Ex/HandoOn_1/index.html#epsg-code",
    "href": "HandsOn_Ex/HandoOn_1/index.html#epsg-code",
    "title": "Chapter 1. Geospatial Data Wrangling with R",
    "section": "EPSG Code",
    "text": "EPSG Code\nPotential issue includes the missing data or wrongly assigned coordinate system. Missing source data could happen due to missing .proj file for ESRI shapefile.\nThe following code chunk is to assign EPSG code to a simple feature data frame.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nmpsz data frame is projected in svy21, but it shows as 9001, however, what is needed is code 3414. This can be corrected by assigning the correct EPSG code to the dataframe.\nUsing st_set_crs() of sf package to change the EPSG\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nBy using the following code chunk, you will be able to check the CSR again\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "HandsOn_Ex/HandoOn_1/index.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "href": "HandsOn_Ex/HandoOn_1/index.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "title": "Chapter 1. Geospatial Data Wrangling with R",
    "section": "Transforming the projection of preschool from wgs84 to svy21",
    "text": "Transforming the projection of preschool from wgs84 to svy21\nIt is very common to transform the original data from geographic coordinate system to project coordinate system. The geographic coordinate system is not appropriate if the analysis need to use the distance and/ or area measurements.\nTake the preschool simple feature data frame as an example, using the following code chunk to reveal its wgs84 coordinate system.\n\nst_geometry(preschool)\n\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.7614 1.308683 0)\n\n\nPOINT Z (103.7536 1.315748 0)\n\n\nPOINT Z (103.7645 1.305078 0)\n\n\nPOINT Z (103.765 1.305239 0)\n\n\nPOINT Z (103.7597 1.315983 0)\n\n\nUsing the following code chunk to perform the projection transformation.\n\npreschool <- st_transform(preschool, crs=3414)\n\n\nst_geometry(preschool)\n\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (19997.26 32333.17 0)\n\n\nPOINT Z (19126.75 33114.35 0)\n\n\nPOINT Z (20345.12 31934.56 0)\n\n\nPOINT Z (20400.31 31952.36 0)\n\n\nPOINT Z (19810.78 33140.31 0)"
  },
  {
    "objectID": "HandsOn_Ex/HandoOn_1/index.html#importing-data-1",
    "href": "HandsOn_Ex/HandoOn_1/index.html#importing-data-1",
    "title": "Chapter 1. Geospatial Data Wrangling with R",
    "section": "Importing Data",
    "text": "Importing Data\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlist(listings) \n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type"
  },
  {
    "objectID": "HandsOn_Ex/HandoOn_1/index.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "HandsOn_Ex/HandoOn_1/index.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "Chapter 1. Geospatial Data Wrangling with R",
    "section": "Creating a simple feature data frame from an aspatial data frame",
    "text": "Creating a simple feature data frame from an aspatial data frame\n\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n\nThe code chunk comprises of the following attributes:\n\ncoords - argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs - argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System.\n%>% - used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system\n\n\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…"
  },
  {
    "objectID": "HandsOn_Ex/HandoOn_1/index.html#buffering",
    "href": "HandsOn_Ex/HandoOn_1/index.html#buffering",
    "title": "Chapter 1. Geospatial Data Wrangling with R",
    "section": "Buffering",
    "text": "Buffering\nScenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nSolution:\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nCalculating Area of Buffers:\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nTotal Land Involved:\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]"
  },
  {
    "objectID": "HandsOn_Ex/HandoOn_1/index.html#point-in-polygon-count",
    "href": "HandsOn_Ex/HandoOn_1/index.html#point-in-polygon-count",
    "title": "Chapter 1. Geospatial Data Wrangling with R",
    "section": "Point-in-polygon Count",
    "text": "Point-in-polygon Count\nScenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nSolution:\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool))\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nCalculating Density of Pre-school by Planning Subzone\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GeospatialAnalytics",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html",
    "href": "HandsOn_Ex/HandsOn_2/index.html",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolization of enumeration units (i.e. countries, provinces, states, countries or census units) using area patterns or graduated colors.\nIn this hands-on exercise, I will learn how to plot functional choropleth maps by using tmap package in R."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#data-acquisition",
    "href": "HandsOn_Ex/HandsOn_2/index.html#data-acquisition",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Data Acquisition",
    "text": "Data Acquisition\n\nData.gov.sg: Master Plan 2014 Subzone Boundary (Web)\nDepartment of Statistics, Singapore: Singapore Residents by Planning Area/ Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 (CSV format)"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#importing-data",
    "href": "HandsOn_Ex/HandsOn_2/index.html#importing-data",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Importing Data",
    "text": "Importing Data\n\nGeospatial Data\nUsing st_read() function of sf package to import the relevant shapefile into R.\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\sxing\\OneDrive - Singapore Management University\\ISSS624 Applied Geospatial Analytics\\R\\sxingxian\\GeospatialAnalytics\\HandsOn_Ex\\HandsOn_2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nUsing the following code chunk to view the top 10 records within the dataset\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nAttribute Data\nThe dataset from the csv file, respopagesextod2011to2020.csv, will be imported into R.\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#joining-attribute-data-and-geospatial-data",
    "href": "HandsOn_Ex/HandsOn_2/index.html#joining-attribute-data-and-geospatial-data",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Joining Attribute Data And Geospatial Data",
    "text": "Joining Attribute Data And Geospatial Data\nBefore a georelational join can be performed, we will need to convert the values in PA and SZ fields to uppercase, as the both PA and SZ fields are in combination of upper- and lowercase, whereas, values in subzone_n and pln_areaa_n fields are in uppercase.\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nUsing left_join() in dplyr to join the geographical data and attribute table using planning subzone name as the common identifier.\n\nleft_join() - part of dplyr package used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#plotting-using-qtm",
    "href": "HandsOn_Ex/HandsOn_2/index.html#plotting-using-qtm",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Plotting Using qtm()",
    "text": "Plotting Using qtm()\nThis is the quickest method to create a choropleth map. It is concise and provides a good default visualization in multiple cases.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nAttributes used in the above code chunk:\n\ntmap_mode() - with \"plot\" option is used to produce a static map. For interactive mode, \"view\" option should be used.\nfill - an argument used to map the attribute (i.e. DEPENDENCY)"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#plotting-using-tmaps-elements",
    "href": "HandsOn_Ex/HandsOn_2/index.html#plotting-using-tmaps-elements",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Plotting Using tmap's elements",
    "text": "Plotting Using tmap's elements\nThe main disadvantage of qtm() makes aesthetics of individual layers harder to control. This can be resolved by using tmap’s drawing elements to draw high quality cartographic choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#drawing-a-base-map",
    "href": "HandsOn_Ex/HandsOn_2/index.html#drawing-a-base-map",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Drawing A Base Map",
    "text": "Drawing A Base Map\nThe following is used:\n\ntm_shape() - used to define the input data\ntm_polygons() - used to draw the planning subzone ploygons\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#drawing-choropleth-map-using-tm_ploygons",
    "href": "HandsOn_Ex/HandsOn_2/index.html#drawing-choropleth-map-using-tm_ploygons",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Drawing Choropleth Map Using tm_ploygons()",
    "text": "Drawing Choropleth Map Using tm_ploygons()\nThe following code chunk will be used to show the geographical distribution of a selected variable by planning subzone. This can be done by assigning the target variable to tm_polygons(). In this case, we will assign Dependency as the target variable.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#drawing-a-choropleth-map-using-tm_fill-and-tm_border",
    "href": "HandsOn_Ex/HandsOn_2/index.html#drawing-a-choropleth-map-using-tm_fill-and-tm_border",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Drawing a choropleth map using tm_fill() and tm_border()",
    "text": "Drawing a choropleth map using tm_fill() and tm_border()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nUsing the above code chunk shows that the planning subzones are shared according to the respective dependency values. We will need to add the boundary of the planning subzone in order to get a clearer clarity.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#plotting-choropleth-maps-with-built-in-classification-methods",
    "href": "HandsOn_Ex/HandsOn_2/index.html#plotting-choropleth-maps-with-built-in-classification-methods",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Plotting choropleth maps with built-in classification methods",
    "text": "Plotting choropleth maps with built-in classification methods\nMethod: jenks\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nMethod: equal\nAn EQUAL data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nChoropleth Maps With Different Classification Methods\nMethod: kmeans\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\",\n          n = 5, style = \"kmeans\") + tm_borders(alpha = 0.5)\n\n\n\n\nMethod: headtails\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\",\n          n = 5, style = \"headtails\") + tm_borders(alpha = 0.5)\n\n\n\n\nMethod: pretty\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\",\n          n = 5, style = \"pretty\") + tm_borders(alpha = 0.5)\n\n\n\n\nObservations:\n\nThe methods pretty and equal are both visually dominated by the lighter tone, as the dependency values are all mostly at the lower end of the range.\nThe methods kmeans and jenks have a wider spread of colors with differences in coloring of subzones.\nThe method headstails has lesser class or group of colors that apparently lean towards the lower end of spectrum.\n\n\n\nChoropleth Maps With Same Classification Method With Different Classes\nUsing jenks method with different number of classes, n.\nn = 3\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 3, style = \"jenks\") + tm_borders(alpha = 0.5)\n\n\n\n\nn = 4\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 4, style = \"jenks\") + tm_borders(alpha = 0.5)\n\n\n\n\nn = 5\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"jenks\") + tm_borders(alpha = 0.5)\n\n\n\n\nn = 6\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 6, style = \"jenks\") + tm_borders(alpha = 0.5)\n\n\n\n\nn = 7\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 7, style = \"jenks\") + tm_borders(alpha = 0.5)\n\n\n\n\nObservation:\n\nThe lesser number of classes has the tendency to group subzones into one class which may result in an inaccurate representation.\nThe higher the number of classes will create groups with one color subzone. Similarly, this may not be an accurate representation."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#plotting-choropleth-map-with-custom-break",
    "href": "HandsOn_Ex/HandsOn_2/index.html#plotting-choropleth-map-with-custom-break",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Plotting Choropleth Map with Custom Break",
    "text": "Plotting Choropleth Map with Custom Break\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#using-colorbrewer-paletter",
    "href": "HandsOn_Ex/HandsOn_2/index.html#using-colorbrewer-paletter",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Using ColorBrewer Paletter",
    "text": "Using ColorBrewer Paletter\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nReverse the color shading by adding a ‘-’ prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#map-legend",
    "href": "HandsOn_Ex/HandsOn_2/index.html#map-legend",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Map Legend",
    "text": "Map Legend\nSeveral legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#map-style",
    "href": "HandsOn_Ex/HandsOn_2/index.html#map-style",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Map Style",
    "text": "Map Style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\""
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#cartographic-furniture",
    "href": "HandsOn_Ex/HandsOn_2/index.html#cartographic-furniture",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Cartographic Furniture",
    "text": "Cartographic Furniture\ntmap package provides arguments to draw other map furniture, such as compass, scale bar and grid lines.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nThe following code chunk will help to reset the default style.\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\""
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_2/index.html#multiple-choropleth-maps",
    "href": "HandsOn_Ex/HandsOn_2/index.html#multiple-choropleth-maps",
    "title": "Chapter 2. Choropleth Mapping with R",
    "section": "Multiple Choropleth Maps",
    "text": "Multiple Choropleth Maps\nFacet maps composed of many maps arranged side-by-side, sometimes stacked vertically. Small multiple maps enable the visualization of how spatial relationship change with respect to another variable, such as time.\n\nAssign Multiple Values to One of the Aesthetic Arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nMultiple small choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\nDefining A Group-by Variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\nCreate Multiple Stand-alone Maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\nMapping Spatial Objecting Meeting Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html",
    "href": "HandsOn_Ex/HandsOn_4/index.html",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "This is an introductory to global and local measures of spatial autocorrelation by using spdep package.\nIn this chapter, I will apply what was introduced in the previous chapters into this chapter with additional methods:\n\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#data-acquisition",
    "href": "HandsOn_Ex/HandsOn_4/index.html#data-acquisition",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Data Acquisition",
    "text": "Data Acquisition\n\nHunan province administrative boundary layer at country level. A geospatial dataset in ESRI shapefile format.\nHunan_2012.csv is a file contains selected Hunan’s local development indicators in 2012."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#importing-data",
    "href": "HandsOn_Ex/HandsOn_4/index.html#importing-data",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Importing Data",
    "text": "Importing Data\n\nGeospatial Data\nUsing st_read() function of sf package to import the relevant shapefile into R.\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Users\\sxing\\OneDrive - Singapore Management University\\ISSS624 Applied Geospatial Analytics\\R\\sxingxian\\GeospatialAnalytics\\HandsOn_Ex\\HandsOn_4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nHunan Data Set\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nRelational Join\nPerform left join between the two data set, Hunan’s SpatialPolygonsDataFrame and Hunan2012 data.\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\nVisual Indicator for Regional Development\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#computing-contiguity-spatial-weights",
    "href": "HandsOn_Ex/HandsOn_4/index.html#computing-contiguity-spatial-weights",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nConstruct a spatial weights of the study area to define the neighborhood relationship between the geographical units in the study area.\nUsing the poly2nb() function in spdep package to compute contiguity weight matrices for the study area. This function builds a list of neighbors based on region with contiguous boundaries.\nThe queen argument in the function is defaulted to TRUE if it is not explicitly set. The argument will return a list of first order neighbors using the Queen criteria by default. It can be turned off by setting the argument as FALSE.\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe given summary shows that there are 88 area units in Hunan and the most connected area unit has 11 neighbors, whereas 2 area units only have 1 neighbor."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#row-standardised-weights-matrix",
    "href": "HandsOn_Ex/HandsOn_4/index.html#row-standardised-weights-matrix",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Row-standardised weights matrix",
    "text": "Row-standardised weights matrix\nWe will need to assign weights to each neighboring polygon. Each neighboring polygon will be assigned equal weight (style=“W”). We will use fraction 1/(# of neighbors) to each neighboring country then summing the weighted income values.\nUsing this method has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons which potentially will result in an over or under estimating the true nature of the spatial autocorrelation in the data.\nThere are two styles, W and B, where B style usually is a more robust option.\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThere are two major arguments in the function:\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nzero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#global-spatial-autocorrelation-morans-i",
    "href": "HandsOn_Ex/HandsOn_4/index.html#global-spatial-autocorrelation-morans-i",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation: Moran’s I",
    "text": "Global Spatial Autocorrelation: Moran’s I\n\nMaron’s I Test\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nAssuming that the alpha value is 0.05, with the following hypothesis:\n\nH0: The analyzed attribute is randomly distributed\nH1: The analyzed attribute is not randomly distributed\n\nSince the resultant p-value is smaller than the alpha value with a positive z-score which shows that the analyzed attribute is not randomly distributed with the spatial distribution of values more spatially clustered.\n\n\nComputing Monte Carlo Moran’s I\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualize Monte Carlo Moran’s I\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\nHistogram\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nUsing ggplot\n\nmonte_carlo <- as.data.frame(bperm[7])\n\nggplot(monte_carlo, aes(x=res)) + \n  geom_density(fill='orange') +\n  geom_vline(aes(xintercept=0),\n            color=\"red\", linetype=\"dotted\", size=1) +\n  labs(title = \"Monte Carlo Simulation of Moran's I\", x = \"Test Statistic\", y = \"Density\") +\n  theme_minimal() \n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#global-spatial-autocorrelation-gearys",
    "href": "HandsOn_Ex/HandsOn_4/index.html#global-spatial-autocorrelation-gearys",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "GLobal Spatial Autocorrelation: Geary’s",
    "text": "GLobal Spatial Autocorrelation: Geary’s\n\nGeary’s C Test\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\nComputing Monte Carlo Geary’s C\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nBoth below the alpha value of 0.05, hence accept the alternate hypothesis."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#visualization",
    "href": "HandsOn_Ex/HandsOn_4/index.html#visualization",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Visualization",
    "text": "Visualization\n\nMonte Carlo Geary’s C\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\nBased on the plot above, there is a significant evidence of positive autocorrelation."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#compute-morans-i-correlogram",
    "href": "HandsOn_Ex/HandsOn_4/index.html#compute-morans-i-correlogram",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Compute Moran’s I Correlogram",
    "text": "Compute Moran’s I Correlogram\nThe following function from spdep package is used to compute a 6-lag spatial correlogram of GDPPC:\n\nsp.correlogram() - The plot function plots a bar from the estimated Moran’s I, or Geary’s C value to +/- twice the square root of its variance\n\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nThe plotted output might not allow us to provide complete interpretation, as not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nBased on the plot, lags 1 and 2 have positive autocorrelation whereas lags 5 and 6 have negative autocorrelation with statistical evidences in the resultant output."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#compute-gearys-c-correlogram-and-plot",
    "href": "HandsOn_Ex/HandsOn_4/index.html#compute-gearys-c-correlogram-and-plot",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Compute Geary’s C Correlogram And Plot",
    "text": "Compute Geary’s C Correlogram And Plot\nSimilar to the above plot, the following plot will be using sp.correlogram() function from spdep package to compute a 6-lag spatial correlogram of GDPPC.\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nLet’s have a look at the printed out analysis report.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#computing-local-morans-i",
    "href": "HandsOn_Ex/HandsOn_4/index.html#computing-local-morans-i",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Local Moran’s I",
    "text": "Computing Local Moran’s I\nThe following function of spdep package will be used for computing local Moran’s I. It computes li values, given a set of zi values and a list of objects providing neighbor weighting for the polygon associated with the zi values.\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nUsing the localmoran() function, it returns a matrix of values. It contains the following columns:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe following code chunk list the contents of the localmoran() matrix:\n\nprintCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#mapping-the-local-morans-i",
    "href": "HandsOn_Ex/HandsOn_4/index.html#mapping-the-local-morans-i",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Mapping The Local Moran’s I",
    "text": "Mapping The Local Moran’s I\nAppend the local Moran’s I dataframe (localMI) onto Hunan SpatialPolygonDataFrame. The following code chunks can be used to perform the tasks.\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#mapping-local-morans-i-values",
    "href": "HandsOn_Ex/HandsOn_4/index.html#mapping-local-morans-i-values",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Mapping Local Moran’s I Values",
    "text": "Mapping Local Moran’s I Values\nUsing the choropleth mappign functions of tmap package, the local Moran’s I values can be plotted out.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#mapping-local-morans-i-p-values",
    "href": "HandsOn_Ex/HandsOn_4/index.html#mapping-local-morans-i-p-values",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Mapping local Moran’s I p-values",
    "text": "Mapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative li values. It is useful to consider the p-values for each of these values.\nThe following code chunks uses the functions of tmap package to produce a choropleth map of Moran’s I p-values.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#mapping-both-local-morans-i-values-and-p-values",
    "href": "HandsOn_Ex/HandsOn_4/index.html#mapping-both-local-morans-i-values-and-p-values",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Mapping both local Moran’s I values and p-values",
    "text": "Mapping both local Moran’s I values and p-values\nPlot both local Moran’s I values map and its corresponding p-values map using the following code chunk.\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#moran-scatterplot",
    "href": "HandsOn_Ex/HandsOn_4/index.html#moran-scatterplot",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Moran Scatterplot",
    "text": "Moran Scatterplot\nThe scatterplot illustrates the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations using the following code chunk.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nThe above plot shows a split of 4 quadrants with the top right corner belonging to areas that have high GDPPC surrounded by other areas that have average level of GDPPC."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#moran-scatterpot-with-standardized-variable",
    "href": "HandsOn_Ex/HandsOn_4/index.html#moran-scatterpot-with-standardized-variable",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Moran Scatterpot with Standardized Variable",
    "text": "Moran Scatterpot with Standardized Variable\nUsing scale() to cernters and scales the variables. Subtracting the mean (omitting NAs) is done to achieve centering, and scaling is done by dividing the centered variable by their standard deviations.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector \n\nas.vector() is added to the end to ensure that the data type we get out of it is a vector that map neatly into the dataframe. The following code chunk will plot the Moran scatterplot again.\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#preparing-lisa-map-classes",
    "href": "HandsOn_Ex/HandsOn_4/index.html#preparing-lisa-map-classes",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Preparing LISA map classes",
    "text": "Preparing LISA map classes\nThe following code chunk prepares the LISA cluster maps.\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nDV <- hunan$GDPPC - mean(hunan$GDPPC)     \nC_mI <- localMI[,1] - mean(localMI[,1])    \nsignif <- 0.05       \nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 1      \nquadrant[DV <0 & C_mI>0] <- 2\nquadrant[DV >0 & C_mI<0] <- 3\n\nThe above code chunk sets the statistical significance level of the local Moran to 0.05 and using the quadrant command line to define 4 different categories, high-high, low-low, low-high, high-low.\nThe following code chunk will place non-significant Moran into category 0.\n\nquadrant[localMI[,5]>signif] <- 0"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#plotting-lisa-map",
    "href": "HandsOn_Ex/HandsOn_4/index.html#plotting-lisa-map",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Plotting LISA Map",
    "text": "Plotting LISA Map\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nWith effective interpretation, it is better to plot both local Moran’s I values map and its corresponding p-values map next to each other using the following code chunk.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, asp=1, ncol=2)"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#getis-and-ords-g-statistics",
    "href": "HandsOn_Ex/HandsOn_4/index.html#getis-and-ords-g-statistics",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Getis and Ord’s G-Statistics",
    "text": "Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#deriving-distance-based-weight-matrix",
    "href": "HandsOn_Ex/HandsOn_4/index.html#deriving-distance-based-weight-matrix",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Deriving distance-based weight matrix",
    "text": "Deriving distance-based weight matrix\nWe need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\nDeriving the Centroid\nUsing the mapping function, we will be able to get the coordinates in a separate dataframe as we need points to associate with each polygon before we can make our connectivity graph.\nTo get the longitude values, we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation and 1. This will allow getting the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nCombine both longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\n\n\nDetermine the cut-off distance\nThe upper limit for distance band can be determined by using the following steps:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary shows that the largest first nearest neighbor distance is 61.79km, so using this as the upper threshold gives certainty that all units will have at least one neighbor.\n\n\nComputing fixed distance weight matrix\nThe distance weight matrix can be computed by using dnearneigh() function.\ndnearneigh() - The function identifies neighbours of region points by Euclidean distance in the metric of the points between lower (greater than or equal to (changed from version 1.1-7)) and upper (less than or equal to) bounds, or with longlat = TRUE, by Great Circle distance in kilometers. If x is an \"sf\" object and use_s2= is TRUE, spherical distances in km are used.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nnb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#computing-adaptive-distance-weight-matrix",
    "href": "HandsOn_Ex/HandsOn_4/index.html#computing-adaptive-distance-weight-matrix",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing adaptive distance weight matrix",
    "text": "Computing adaptive distance weight matrix\nOne of the many characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbors and the less densely settle areas (usually the rural countries) tend to have lesser neighbors. Having many neighbors smoothed the neighbor relationship across more neighbors.\nIt is possible to control the numbers of neighbors directly using k-nearest neighbors, either accepting asymmetric neighbors or imposing symmetry.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nnb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#gi-statistics-using-fixed-distance",
    "href": "HandsOn_Ex/HandsOn_4/index.html#gi-statistics-using-fixed-distance",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "GI statistics using fixed distance",
    "text": "GI statistics using fixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe above code chunk performs 3 tasks:\n\nit convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix().\ncbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi.\nthe field name of the gi values is renamed to gstat_fixed by using rename()."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#mapping-gi-values-with-fixed-distance-weights",
    "href": "HandsOn_Ex/HandsOn_4/index.html#mapping-gi-values-with-fixed-distance-weights",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Mapping Gi values with fixed distance weights",
    "text": "Mapping Gi values with fixed distance weights\nMap the Gi values derived using fixed distance weight matrix.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#gi-statistics-using-adaptive-distance",
    "href": "HandsOn_Ex/HandsOn_4/index.html#gi-statistics-using-adaptive-distance",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Gi Statistics Using Adaptive Distance",
    "text": "Gi Statistics Using Adaptive Distance\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)"
  },
  {
    "objectID": "HandsOn_Ex/HandsOn_4/index.html#mapping-gi-values-with-adaptive-distance-weights",
    "href": "HandsOn_Ex/HandsOn_4/index.html#mapping-gi-values-with-adaptive-distance-weights",
    "title": "Chapter 4. Global and Local Measures of Spatial Autocorrelation",
    "section": "Mapping Gi values with adaptive distance weights",
    "text": "Mapping Gi values with adaptive distance weights\nVisualize the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  }
]